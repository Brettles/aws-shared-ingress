AWSTemplateFormatVersion: 2010-09-09
Description: Deploys a stack for each applciation in the ingress VPC - ALB, CloudFront.

Parameters:
  ApplicationName:
    Type: String
    Description: Name of this application
  EndpointServiceName:
    Type: String
    Description: Name of the endpoint service that was created for the application - something like 'com.amazonaws.vpce.ap-southeast-2.vpce-svc-01234567890abcdef'
 
Outputs:
  CloudFrontUrl:
    Description: Application CloudFront URL
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}/'

Mappings:
#
# If the deployment region is not in the list below, update in manually or
# run the following command to retrieve all CloudFront prefix list ids for
# regions that your account is opted into:
#
# for REGION in $(aws ec2 describe-regions --query 'Regions[*].RegionName' --output text); do PREFIXLISTID=$(aws ec2 describe-managed-prefix-lists --region ${REGION} --query "PrefixLists[?PrefixListName=='com.amazonaws.global.cloudfront.origin-facing'].PrefixListArn" --output text | cut -f2 -d'/'); echo "    ${REGION}:"; echo "      PrefixList: ${PREFIXLISTID}"; done
#
  CloudFrontPrefixLists:
    ap-south-2:
      PrefixList: pl-0a25c3463226fcc61
    ap-south-1:
      PrefixList: pl-9aa247f3
    eu-south-1:
      PrefixList: pl-1bbc5972
    eu-south-2:
      PrefixList: pl-052dcbe0f793f19da
    me-central-1:
      PrefixList: pl-05266a86378662c23
    il-central-1:
      PrefixList: pl-0dd89524416301988
    ca-central-1:
      PrefixList: pl-38a64351
    eu-central-1:
      PrefixList: pl-a3a144ca
    eu-central-2:
      PrefixList: pl-00b37293991dbe6a8
    us-west-1:
      PrefixList: pl-4ea04527
    us-west-2:
      PrefixList: pl-82a045eb
    af-south-1:
      PrefixList: pl-c0aa4fa9
    eu-north-1:
      PrefixList: pl-fab65393
    eu-west-3:
      PrefixList: pl-75b1541c
    eu-west-2:
      PrefixList: pl-93a247fa
    eu-west-1:
      PrefixList: pl-4fa04526
    ap-northeast-3:
      PrefixList: pl-31a14458
    ap-northeast-2:
      PrefixList: pl-22a6434b
    me-south-1:
      PrefixList: pl-17b2577e
    ap-northeast-1:
      PrefixList: pl-58a04531
    sa-east-1:
      PrefixList: pl-5da64334
    ap-east-1:
      PrefixList: pl-14b2577d
    ca-west-1:
      PrefixList: pl-0530d4c590b35122b
    ap-southeast-1:
      PrefixList: pl-31a34658
    ap-southeast-2:
      PrefixList: pl-b8a742d1
    ap-southeast-3:
      PrefixList: pl-bca247d5
    ap-southeast-4:
      PrefixList: pl-0fb7e7cfe038ae0e9
    us-east-1:
      PrefixList: pl-3b927c52
    us-east-2:
      PrefixList: pl-b6a144df

Resources:
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Ref ApplicationName
        ViewerCertificate:
          CloudFrontDefaultCertificate: True
          MinimumProtocolVersion: TLSv1.2_2021
        DefaultRootObject: index.html
        Enabled: True
        HttpVersion: http2and3
        Origins:
        - DomainName: !GetAtt ALB.DNSName
          Id: !Sub 'Origin-${ApplicationName}'
          CustomOriginConfig:
            OriginProtocolPolicy: http-only
            OriginSSLProtocols:
            - TLSv1.2
          OriginCustomHeaders:
           - HeaderName: X-Shared-Ingress-Secret
             HeaderValue: !Ref ApplicationName
        DefaultCacheBehavior:
          TargetOriginId: !Sub 'Origin-${ApplicationName}'
          ViewerProtocolPolicy: allow-all
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
        PriceClass: PriceClass_All
      Tags:
      - Key: Name
        Value: !Ref ApplicationName

  EndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Enable access to ${ApplicationName} endpoint'
      VpcId: !ImportValue SharedIngressVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub '${ApplicationName}-Endpoint'

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Enable access to ${ApplicationName} ALB'
      VpcId: !ImportValue SharedIngressVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId:  !FindInMap [CloudFrontPrefixLists, !Ref 'AWS::Region', PrefixList]
      Tags:
      - Key: Name
        Value: !Sub '${ApplicationName}-ALB'

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ApplicationName}-Ingress'
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      SecurityGroups:
      - !Ref ALBSecurityGroup
      Subnets:
      - !ImportValue SharedIngressPublicSubnetOneId
      - !ImportValue SharedIngressPublicSubnetTwoId
      Tags:
      - Key: Name
        Value: !Ref ApplicationName

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        Order: 1
        TargetGroupArn: !Ref ALBTargetGroup

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Actions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      Conditions:
      - Field: http-header
        HttpHeaderConfig:
          HttpHeaderName: X-Shared-Ingress-Secret
          Values:
          - !Ref ApplicationName

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ApplicationName}-Ingress'
      VpcId: !ImportValue SharedIngressVpcId
      IpAddressType: ipv4
      Port: 80
      Protocol: HTTP
      TargetType: ip
      Tags:
      - Key: Name
        Value: !Ref ApplicationName

  ApplicationEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Ref EndpointServiceName
      VpcEndpointType: Interface
      VpcId: !ImportValue SharedIngressVpcId
      SecurityGroupIds:
      - !Ref EndpointSecurityGroup
      SubnetIds:
      - !ImportValue SharedIngressPrivateSubnetOneId
      - !ImportValue SharedIngressPrivateSubnetTwoId

  UpdateALBTargetGroup:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt LambdaUpdateALBTargetGroup.Arn 

  LambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
    - ApplicationEndpoint
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: Endpoint
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ec2:DescribeVpcEndpoints
            Resource: '*'
      - PolicyName: ENI
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: ec2:DescribeNetworkInterfaces
            Resource: '*'
      - PolicyName: EC2
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: 
            - elasticloadbalancing:RegisterTargets
            - elasticloadbalancing:DeregisterTargets
            Resource: !GetAtt ALBTargetGroup.TargetGroupArn

  LambdaUpdateALBTargetGroup:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.12
      Architectures: [arm64]
      Timeout: 20
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EndpointId: !Ref ApplicationEndpoint
          TargetGroupArn: !GetAtt ALBTargetGroup.TargetGroupArn
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          import urllib3
          import json

          ec2 = boto3.client('ec2')
          alb = boto3.client('elbv2')

          endpointId:str = os.getenv('EndpointId')
          targetGroupArn:str = os.getenv('TargetGroupArn')

          logging.basicConfig()
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def sendCfnResponse(event, context, rawResponse):
              responseAsText = json.dumps(rawResponse)
              responseUrl = event['ResponseURL']

              logger.info(f'{responseUrl=} {rawResponse=}')

              http = urllib3.PoolManager()
              response = http.request('PUT', responseUrl,
                                      headers={'Content-Length': len(responseAsText)},
                                      body=responseAsText)

              if response.status != 200:
                  logger.error(f'CFN request failed: {response.info()}')
              
          def lambda_handler(event, context):
              logger.info(f'{endpointId=} {targetGroupArn=}')

              cfnResponse = { 'Status': 'SUCCESS',
                              'Reason': f'Details in CloudWatch Logs: f{context.log_stream_name}',
                              'PhysicalResourceId': context.log_stream_name,
                              'StackId': event['StackId'],
                              'RequestId': event['RequestId'],
                              'LogicalResourceId': event['LogicalResourceId'],
                              'Data': {'Message': 'Resource creation successful'} }

              try:
                  endpointInfo:dict = ec2.describe_vpc_endpoints(Filters=[{'Name':'vpc-endpoint-id', 'Values':[endpointId]}])
                  logger.info(endpointInfo)
                  interfaceIdOne:str = endpointInfo['VpcEndpoints'][0]['NetworkInterfaceIds'][0]
                  interfaceIdTwo:str = endpointInfo['VpcEndpoints'][0]['NetworkInterfaceIds'][1]
              except Exception as e:
                  logger.error(f'Failed to get VPC endpoint information: {e}')

                  cfnResponse['Status'] = 'FAILED'
                  cfnResponse['Reason'] = str(e)
                  cfnResponse['Data'] = {'Message': 'Resource creation failed'}
                  sendCfnResponse(event, context, cfnResponse)

                  return

              try:
                  interfaceInfo:dict = ec2.describe_network_interfaces(Filters=[{'Name':'network-interface-id', 'Values':[interfaceIdOne, interfaceIdTwo]}])
                  logger.info(interfaceInfo)
                  targetIpAddressOne:str = interfaceInfo['NetworkInterfaces'][0]['PrivateIpAddress']
                  targetIpAddressTwo:str = interfaceInfo['NetworkInterfaces'][1]['PrivateIpAddress']
              except Exception as e:
                  logger.error(f'Failed to get ENI information: {e}')

                  cfnResponse['Status'] = 'FAILED'
                  cfnResponse['Reason'] = str(e)
                  cfnResponse['Data'] = {'Message': 'Resource creation failed'}
                  sendCfnResponse(event, context, cfnResponse)

                  return

              requestType:str = event['RequestType']
              if requestType == 'Create':
                  try:
                      alb.register_targets(TargetGroupArn=targetGroupArn, Targets=[{'Id':targetIpAddressOne, 'Port':80}, {'Id':targetIpAddressTwo, 'Port':80}])
                  except Exception as e:
                      logger.error(f'Failed to get set ALB targets: {e}')

                      cfnResponse['Status'] = 'FAILED'
                      cfnResponse['Reason'] = str(e)
                      cfnResponse['Data'] = {'Message': 'Resource creation failed'}
                      sendCfnResponse(event, context, cfnResponse)

                      return

              elif requestType == 'Delete':
                  pass

              else:
                  logger.warning(f'Unhandled request type: {requestType}')

              sendCfnResponse(event, context, cfnResponse)